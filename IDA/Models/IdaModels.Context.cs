//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace IDA.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class IdaDBEntities : DbContext
    {
        public IdaDBEntities()
            : base("name=IdaDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Admin> Admins { get; set; }
        public virtual DbSet<AssignedPM> AssignedPMs { get; set; }
        public virtual DbSet<Assignment> Assignments { get; set; }
        public virtual DbSet<Client> Clients { get; set; }
        public virtual DbSet<EmpMeeting> EmpMeetings { get; set; }
        public virtual DbSet<Leave> Leaves { get; set; }
        public virtual DbSet<LogisticBooking> LogisticBookings { get; set; }
        public virtual DbSet<Meeting> Meetings { get; set; }
        public virtual DbSet<ProjectReport> ProjectReports { get; set; }
        public virtual DbSet<Report> Reports { get; set; }
        public virtual DbSet<SubTask> SubTasks { get; set; }
        public virtual DbSet<Task> Tasks { get; set; }
        public virtual DbSet<Tbl_UserActivation> Tbl_UserActivation { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<Vehicle> Vehicles { get; set; }
        public virtual DbSet<Feedback> Feedbacks { get; set; }
        public virtual DbSet<ClientComment> ClientComments { get; set; }
        public virtual DbSet<Expenditure> Expenditures { get; set; }
        public virtual DbSet<Salary> Salaries { get; set; }
        public virtual DbSet<InvoiceTbl> InvoiceTbls { get; set; }
        public virtual DbSet<Creditor> Creditors { get; set; }
        public virtual DbSet<Debtor> Debtors { get; set; }
        public virtual DbSet<Transaction> Transactions { get; set; }
        public virtual DbSet<InepVariance> InepVariances { get; set; }
        public virtual DbSet<Project> Projects { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
    
        public virtual int AddNewClientRecord(string name, string surname, string email, string password, string company, string phoneNo, Nullable<int> clientId, Nullable<System.DateTime> dateRegistered)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var surnameParameter = surname != null ?
                new ObjectParameter("Surname", surname) :
                new ObjectParameter("Surname", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var companyParameter = company != null ?
                new ObjectParameter("Company", company) :
                new ObjectParameter("Company", typeof(string));
    
            var phoneNoParameter = phoneNo != null ?
                new ObjectParameter("PhoneNo", phoneNo) :
                new ObjectParameter("PhoneNo", typeof(string));
    
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var dateRegisteredParameter = dateRegistered.HasValue ?
                new ObjectParameter("DateRegistered", dateRegistered) :
                new ObjectParameter("DateRegistered", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddNewClientRecord", nameParameter, surnameParameter, emailParameter, passwordParameter, companyParameter, phoneNoParameter, clientIdParameter, dateRegisteredParameter);
        }
    
        public virtual int AddNewEmployeeRecord(string name, string surname, string gender, string email, string position, string address, string hireDate, string salary, string iDNumber, string phoneNo, Nullable<int> empId)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var surnameParameter = surname != null ?
                new ObjectParameter("Surname", surname) :
                new ObjectParameter("Surname", typeof(string));
    
            var genderParameter = gender != null ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var positionParameter = position != null ?
                new ObjectParameter("Position", position) :
                new ObjectParameter("Position", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var hireDateParameter = hireDate != null ?
                new ObjectParameter("HireDate", hireDate) :
                new ObjectParameter("HireDate", typeof(string));
    
            var salaryParameter = salary != null ?
                new ObjectParameter("Salary", salary) :
                new ObjectParameter("Salary", typeof(string));
    
            var iDNumberParameter = iDNumber != null ?
                new ObjectParameter("IDNumber", iDNumber) :
                new ObjectParameter("IDNumber", typeof(string));
    
            var phoneNoParameter = phoneNo != null ?
                new ObjectParameter("PhoneNo", phoneNo) :
                new ObjectParameter("PhoneNo", typeof(string));
    
            var empIdParameter = empId.HasValue ?
                new ObjectParameter("EmpId", empId) :
                new ObjectParameter("EmpId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddNewEmployeeRecord", nameParameter, surnameParameter, genderParameter, emailParameter, positionParameter, addressParameter, hireDateParameter, salaryParameter, iDNumberParameter, phoneNoParameter, empIdParameter);
        }
    
        public virtual int AddNewReport(Nullable<int> reportId, string workDescription, Nullable<int> hoursWorked, Nullable<int> targetedHours, Nullable<int> empId)
        {
            var reportIdParameter = reportId.HasValue ?
                new ObjectParameter("ReportId", reportId) :
                new ObjectParameter("ReportId", typeof(int));
    
            var workDescriptionParameter = workDescription != null ?
                new ObjectParameter("WorkDescription", workDescription) :
                new ObjectParameter("WorkDescription", typeof(string));
    
            var hoursWorkedParameter = hoursWorked.HasValue ?
                new ObjectParameter("HoursWorked", hoursWorked) :
                new ObjectParameter("HoursWorked", typeof(int));
    
            var targetedHoursParameter = targetedHours.HasValue ?
                new ObjectParameter("TargetedHours", targetedHours) :
                new ObjectParameter("TargetedHours", typeof(int));
    
            var empIdParameter = empId.HasValue ?
                new ObjectParameter("EmpId", empId) :
                new ObjectParameter("EmpId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddNewReport", reportIdParameter, workDescriptionParameter, hoursWorkedParameter, targetedHoursParameter, empIdParameter);
        }
    
        public virtual int AddToAllProjects(Nullable<int> allProjId, string name, Nullable<System.DateTime> date, string location, Nullable<int> projectId)
        {
            var allProjIdParameter = allProjId.HasValue ?
                new ObjectParameter("AllProjId", allProjId) :
                new ObjectParameter("AllProjId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var locationParameter = location != null ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(string));
    
            var projectIdParameter = projectId.HasValue ?
                new ObjectParameter("ProjectId", projectId) :
                new ObjectParameter("ProjectId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddToAllProjects", allProjIdParameter, nameParameter, dateParameter, locationParameter, projectIdParameter);
        }
    
        public virtual ObjectResult<getClient_Result> getClient()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getClient_Result>("getClient");
        }
    
        public virtual ObjectResult<GetDataForMonthly_Result> GetDataForMonthly()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDataForMonthly_Result>("GetDataForMonthly");
        }
    
        public virtual ObjectResult<getEmployee_Result> getEmployee()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getEmployee_Result>("getEmployee");
        }
    
        public virtual ObjectResult<GetEmployeeByEmail_Result> GetEmployeeByEmail()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEmployeeByEmail_Result>("GetEmployeeByEmail");
        }
    
        public virtual ObjectResult<GetEmployeeById_Result> GetEmployeeById(Nullable<int> empId)
        {
            var empIdParameter = empId.HasValue ?
                new ObjectParameter("EmpId", empId) :
                new ObjectParameter("EmpId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEmployeeById_Result>("GetEmployeeById", empIdParameter);
        }
    }
}
